@model EmployeeRecords.Models.Employee

<style>
    .btn{
        padding:revert !important;
    }
    .fa-solid{
        font-size: 0.9rem !important;
    }
</style>

<div class="container my-5">
    <div id="createForm">
        @using (Html.BeginForm("CreateEmp", "Employee", FormMethod.Post, new { @class = "empFrom" }))
        {
            <h3>Create Employee</h3>
            <div class="row m-0 my-5 border">
                <div class="col-md-12 d-flex justify-content-end">
                    <p class="m-0 text-danger">All fields are required! *</p>
                </div>
                <div class="col-md-6 my-1">
                    @Html.LabelFor(m => m.Firstname)
                    @Html.TextBoxFor(m => m.Firstname, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Firstname, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6 my-1">
                    @Html.LabelFor(m => m.Lastname)
                    @Html.TextBoxFor(m => m.Lastname, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Lastname, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6 my-1">
                    @Html.LabelFor(m => m.Empcode)
                    @Html.TextBoxFor(m => m.Empcode, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Empcode, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6 my-1">
                    @Html.LabelFor(m => m.Dob)
                    @Html.TextBoxFor(m => m.Dob, new { @class = "form-control", @type = "date" })
                    @Html.ValidationMessageFor(m => m.Dob, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6 my-1">
                    @Html.LabelFor(m => m.City)
                    @Html.TextBoxFor(m => m.City, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.City, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6 my-1">
                    @Html.LabelFor(m => m.Department_id)
                    @Html.DropDownListFor(m => m.Department_id, ViewBag.departments as IEnumerable<SelectListItem>, new { @class = "form-select" })
                    @Html.ValidationMessageFor(m => m.Department_id, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-12 my-2 text-center">
                    <button class="btn btn-outline-primary" type="submit">Submit</button>
                </div>
            </div>
        }
    </div>

    <div id="editForm" class="d-none">
        @using (Html.BeginForm("EditEmp", "Employee", FormMethod.Post, new { @class = "empFrom" }))
        {
            <h3>Edit Employee</h3>
            <div class="row m-0 my-5 border">
                <div class="col-md-12 d-flex justify-content-end">
                    @Html.HiddenFor(m => m.employee_id)
                    <p class="m-0 text-danger">All fields are required! *</p>
                </div>
                <div class="col-md-6 my-1">
                    @Html.LabelFor(m => m.Firstname)
                    @Html.TextBoxFor(m => m.Firstname, new { @class = "form-control", @id = "Firstname_edit" })
                    @Html.ValidationMessageFor(m => m.Firstname, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6 my-1">
                    @Html.LabelFor(m => m.Lastname)
                    @Html.TextBoxFor(m => m.Lastname, new { @class = "form-control", @id = "Lastname_edit" })
                    @Html.ValidationMessageFor(m => m.Lastname, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6 my-1">
                    @Html.LabelFor(m => m.Empcode)
                    @Html.TextBoxFor(m => m.Empcode, new { @class = "form-control", @id = "Empcode_edit" })
                    @Html.ValidationMessageFor(m => m.Empcode, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6 my-1">
                    @Html.LabelFor(m => m.Dob)
                    @Html.TextBoxFor(m => m.Dob, new { @class = "form-control", @type = "date", @id = "Dob_edit" })
                    @Html.ValidationMessageFor(m => m.Dob, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6 my-1">
                    @Html.LabelFor(m => m.City)
                    @Html.TextBoxFor(m => m.City, new { @class = "form-control", @id = "City_edit" })
                    @Html.ValidationMessageFor(m => m.City, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6 my-1">
                    @Html.LabelFor(m => m.Department_id)
                    @Html.DropDownListFor(m => m.Department_id, ViewBag.departments as IEnumerable<SelectListItem>, new { @class = "form-select", @id = "Department_id_edit" })
                    @Html.ValidationMessageFor(m => m.Department_id, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-12 my-2 text-center">
                    <button class="btn btn-outline-primary" type="submit">Update</button>
                </div>
            </div>
        }
    </div>
</div>

<hr />

<div class="container my-5">
    <table class="table table-sm table-bordered">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">@Html.LabelFor(m => m.Firstname)</th>
                <th scope="col">@Html.LabelFor(m => m.Lastname)</th>
                <th scope="col">@Html.LabelFor(m => m.Empcode)</th>
                <th scope="col">@Html.LabelFor(m => m.Dob)</th>
                <th scope="col">@Html.LabelFor(m => m.City)</th>
                <th scope="col">@Html.LabelFor(m => m.Department_id)</th>
                <th scope="col">@Html.LabelFor(m => m.IsActive)</th>
                <th scope="col">@Html.LabelFor(m => m.Created_at)</th>
                <th scope="col">@Html.LabelFor(m => m.Updated_at)</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Employees != null)
            {
                foreach (var emp in Model.Employees)
                {
                    <tr>
                        <th scope="row">
                            <button type="button" class="btn btn-outline-success" onclick="editEmp(@emp.employee_id)"><i class="fa-solid fa-pen me-1"></i></button>
                        </th>
                        <td>@emp.Firstname</td>
                        <td>@emp.Lastname</td>
                        <td>@emp.Empcode</td>
                        <td>@emp.Dob</td>
                        <td>@emp.City</td>
                        <td>@emp.Department_name</td>
                        <td>@emp.IsActive</td>
                        <td>@emp.Created_at</td>
                        <td>@emp.Updated_at</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>


@if (Session["errMsg"] != null && !string.IsNullOrWhiteSpace(Session["errMsg"].ToString()))
{
    <script>
        $(function () {
            var message = '@Session["errMsg"].ToString()';
            alert(message);
        })
    </script>
}

@if (ViewBag.Message != null && !string.IsNullOrWhiteSpace(ViewBag.Message))
{
    <script>
        $(function () {
            var message = '@ViewBag.Message';
            alert(message);
            $(".empFrom")[0].reset()
        })
    </script>
}

<script>
    function editEmp(empID) {
        if (empID > 0) {
            $.ajax({
                type: "GET",
                url: "/Employee/GetEmployee",
                data: { ID: empID },
                dataType: "json",
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    console.log(data);

                    $("#employee_id").val(data.employee_id);
                    $("#Firstname_edit").val(data.Firstname);
                    $("#Lastname_edit").val(data.Lastname);
                    $("#Empcode_edit").val(data.Empcode);
                    $("#City_edit").val(data.City);
                    $("#Department_id_edit").val(data.Department_id);

                    var dob = new Date(data.strDob);
                    if (!Object.is(dob, null)) {
                        let day = dob.getDate();
                        if (day < 10) { day = '0' + day; }
                        let month = dob.getMonth() + 1;
                        if (month < 10) { month = '0' + month; }
                        let year = dob.getFullYear();
                        dob = `${year}-${month}-${day}`;
                        $('#Dob_edit').val(dob);
                    }

                    $("#createForm").addClass("d-none");
                    $("#editForm").removeClass("d-none");
                },
                error: function () {
                    alert("Error occured!!")
                }
            }); 
        }
    }
</script>